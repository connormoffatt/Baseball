# ++ Can also initialize using a function that returns a randomly generated list
initList = function() {
theta = c(sample(y1,1), sample(y2,1), sample(y3,1), sample(y4,1),
sample(y5,1), sample(y6,1))
mu = rnorm(1, 0, 100)
sigma = runif(1, 0, 10)
tau = runif(1, 0, 10)
return(list(theta = theta, mu = mu, sigma = sigma, tau = tau))
}
# compile and initialize model
jagsModel = jags.model(file = "C:/Users/conno/Documents/Caltech/Junior 3rd Term/Acm 112/Moffatt Connor PS5/HW5_Part2_Try2.txt",
data = dataList,
inits = initList(),
n.chains = 1,
n.adapt = 10000)
postSamples = coda.samples(model = jagsModel,
variable.names = c("theta", "sigma", "mu", "tau"),
n.iter = 100000)
postSamples = do.call(rbind, postSamples)
summary(postSamples, quantiles=c(0.01, 0.05, 0.5, 0.95,0.99))
count = 0
for (i in 1:100000) {
theta1 = as.double(postSamples[i,4])
theta5 = as.double(postSamples[i,8])
if (theta5 < theta1) {
count = count + 1
}
}
prob_theta5_less_theta1 = count / 100000
postSamples1 = mcmc(postSamples)
postSamples = do.call(rbind, postSamples)
postSamples1 = mcmc(postSamples)
summary(postSamples1, quantiles=c(0.01, 0.05, 0.5, 0.95,0.99))
count = 0
for (i in 1:100000) {
theta1 = as.double(postSamples[i,4])
theta5 = as.double(postSamples[i,8])
if (theta5 < theta1) {
count = count + 1
}
}
prob_theta5_less_theta1 = count / 100000
prob_theta5_less_theta1
##########
# Ec/ACM/CS 112, Spring 2018
# Code. HW 5 - Part 3
# Connor Moffatt
##########
# clear workspace
rm(list=ls())
# set random seed
set.seed(2018)
# libraries
library(rjags)
library(coda)
#########
# SET-UP DATA
#########
# data
nGroups = 6
y1 = c(83, 92, 92, 46)
y2 = c(117, 109, 114, 104)
y3 = c(101, 93, 92, 86)
y4 = c(105, 119, 116, 102)
y5 = c(79, 97, 103, 79)
y6 = c(57, 92, 104, 77)
# data to be passed to JAGS
# NOTE:
# ++ Must be in list format
# ++ For each variable, left denotes the name of the variable, right denotes the current values
# ++ Must match names in model file
y = c(y1, y2, y3, y4, y5, y6)
nTotal = length(y)
group = c(rep(1, length(y1)), rep(2, length(y2)), rep(3, length(y3)),
rep(4, length(y4)), rep(5, length(y5)), rep(6, length(y6)))
dataList = list(nTotal = nTotal,
nGroups = nGroups,
y = y,
group = group)
#####
# INITIALIZE CHAINS & SAMPLE
#####
# init parameters for sampler
# NOTE:
# ++ Must be in list format
# ++ Left hand side denotes name of each variable, and must match names in model file
# ++ Can initialize multiple chains using lists of lists
# ++ Can also initialize using a function that returns a randomly generated list
initList = function() {
theta = c(sample(y1,1), sample(y2,1), sample(y3,1), sample(y4,1),
sample(y5,1), sample(y6,1))
mu = rnorm(1, 0, 100)
sigma = runif(1, 0, 10)
tau = runif(1, 0, 10)
return(list(theta = theta, mu = mu, sigma = sigma, tau = tau))
}
# compile and initialize model
jagsModel = jags.model(file = "C:/Users/conno/Documents/Caltech/Junior 3rd Term/Acm 112/Moffatt Connor PS5/HW5_Part2_Try2.txt",
data = dataList,
inits = initList(),
n.chains = 1,
n.adapt = 10000)
postSamples = coda.samples(model = jagsModel,
variable.names = c("theta", "sigma", "mu", "tau"),
n.iter = 100000)
postSamples = do.call(rbind, postSamples)
# Calculate Predictive Distribution for Hierarchical
result_mat1 = array(0, c(100000,6))
# Plot
for (i in 1:6) {
for (j in 1:100000) {
result_mat1[j, i] = rnorm(1, postSamples[j, i+3], postSamples[j, 2])
}
}
result_mat1
#####
# INITIALIZE CHAINS & SAMPLE
#####
# init parameters for sampler
# NOTE:
# ++ Must be in list format
# ++ Left hand side denotes name of each variable, and must match names in model file
# ++ Can initialize multiple chains using lists of lists
# ++ Can also initialize using a function that returns a randomly generated list
initList = function() {
theta = c(sample(y1,1), sample(y2,1), sample(y3,1), sample(y4,1),
sample(y5,1), sample(y6,1))
sigma = runif(6, 0, 10)
return(list(theta = theta, sigma = sigma))
}
# compile and initialize model
jagsModel2 = jags.model(file = "C:/Users/conno/Documents/Caltech/Junior 3rd Term/Acm 112/Moffatt Connor PS5/HW5_Part3.txt",
data = dataList,
inits = initList(),
n.chains = 1,
n.adapt = 10000)
postSamples2 = coda.samples(model = jagsModel2,
variable.names = c("theta", "sigma"),
n.iter = 100000)
postSamples2 = do.call(rbind, postSamples2)
# Calculate Predictive Distribution for Separate Models
result_mat2 = array(0, c(100000,6))
# Plot
for (i in 1:6) {
for (j in 1:100000) {
result_mat2[j, i] = rnorm(1, postSamples2[j, i + 6], postSamples2[j, i])
}
}
result_mat2
# Calculate MSEs
act_meas = c(67, 87, 67, 116, 92, 100)
MSE1 = rep(0,6)
MSE2 = rep(0,6)
for (i in 1:6) {
MSE1[i] = mean((result_mat1[,i] - act_meas[i])^2)
MSE2[i] = mean((result_mat2[,i] - act_meas[i])^2)
}
avg_MSE1 = mean(MSE1)
avg_MSE2 = mean(MSE2)
std_MSE1 = sd(MSE1)
std_MSE2 = sd(MSE2)
##########
# Ec/ACM/CS 112, Spring 2018
# Code. HW 5 - Part 2
# Connor Moffatt
##########
# clear workspace
rm(list=ls())
# set random seed
set.seed(2018)
# libraries
library(rjags)
library(coda)
#########
# SET-UP DATA
#########
# data
nGroups = 6
y1 = c(83, 92, 92, 46)
y2 = c(117, 109, 114, 104)
y3 = c(101, 93, 92, 86)
y4 = c(105, 119, 116, 102)
y5 = c(79, 97, 103, 79)
y6 = c(57, 92, 104, 77)
# data to be passed to JAGS
# NOTE:
# ++ Must be in list format
# ++ For each variable, left denotes the name of the variable, right denotes the current values
# ++ Must match names in model file
y = c(y1, y2, y3, y4, y5, y6)
nTotal = length(y)
group = c(rep(1, length(y1)), rep(2, length(y2)), rep(3, length(y3)),
rep(4, length(y4)), rep(5, length(y5)), rep(6, length(y6)))
dataList = list(nTotal = nTotal,
nGroups = nGroups,
y = y,
group = group)
#####
# INITIALIZE CHAINS & SAMPLE
#####
# init parameters for sampler
# NOTE:
# ++ Must be in list format
# ++ Left hand side denotes name of each variable, and must match names in model file
# ++ Can initialize multiple chains using lists of lists
# ++ Can also initialize using a function that returns a randomly generated list
initList = function() {
theta = c(sample(y1,1), sample(y2,1), sample(y3,1), sample(y4,1),
sample(y5,1), sample(y6,1))
mu = rnorm(1, 0, 100)
sigma = runif(1, 0, 10)
tau = runif(1, 0, 10)
return(list(theta = theta, mu = mu, sigma = sigma, tau = tau))
}
# compile and initialize model
jagsModel = jags.model(file = "C:/Users/conno/Documents/Caltech/Junior 3rd Term/Acm 112/Moffatt Connor PS5/HW5_Part2_Try2.txt",
data = dataList,
inits = initList(),
n.chains = 1,
n.adapt = 10000)
postSamples = coda.samples(model = jagsModel,
variable.names = c("theta", "sigma", "mu", "tau"),
n.iter = 100000)
postSamples1 = mcmc(postSamples)
postSamples = do.call(rbind, postSamples)
summary(postSamples1, quantiles=c(0.01, 0.05, 0.5, 0.95,0.99))
count = 0
for (i in 1:100000) {
theta1 = as.double(postSamples[i,4])
theta5 = as.double(postSamples[i,8])
if (theta5 < theta1) {
count = count + 1
}
}
prob_theta5_less_theta1 = count / 100000
postSamples
summary(postSamples1, quantiles=c(0.01, 0.05, 0.5, 0.95,0.99))
summary(postSamples)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
library(purrr)
install.packages(purrr)
install.packages("purrr")
library.packages("readr")
libarary(readr)
install.packages("readr")
rm(list=ls())
chapter_path = "C:/Users/conno/Documents/GitHub/Baseball/Analyzing Baseball Data With R/Book - First Edition/Chapter 6 - Advanced Graphics"
setwd(chapter_path)
load("balls_strikes_count.Rdata")
head(cabrera)
# sample creates a random sample
sampleRows <- sample(1:nrow(verlander), 20)
verlander[sampleRows,]
# display histogram and desnity plot of verlander's velocity
histogram(~ speed, data=verlander)
# The lattice package
library(lattice)
# display histogram and desnity plot of verlander's velocity
histogram(~ speed, data=verlander)
densityplot(~ speed, data=verlander, plot.points=FALSE)
densityplot(~ speed, data=verlander, plot.points=TRUE)
# plot.points = FALSE, removes points from being plotted on the x axis
densityplot(~ speed, data=verlander, plot.points=FALSE)
# Multipanel conditioning density plot based on pitchtype
densityplot(~ speed | pitch_type, data=verlander, layout=c(1,5),
plot.points=FALSE)
# Multipanel conditioning density plot based on pitchtype
densityplot(~ speed | pitch_type, data=verlander, layout=c(1,5),
plot.points=TRUE)
# Superimpose density plots
densityplot(~ speed, data=verlander, groups=pitch_type)
# Superimpose density plots
densityplot(~ speed, data=verlander, groups=pitch_type, plotpoints=FALSE)
# Superimpose density plots
densityplot(~ speed, data=verlander, groups=pitch_type, plot.points=FALSE)
# Superimpose density plots
densityplot(~ speed, data=verlander, groups=pitch_type, plot.points=FALSE,
auto.key=FALSE)
# Multipanel conditioning density plot based on pitchtype
densityplot(~ speed | pitch_type, data=verlander, layout=c(1,5),
plot.points=FALSE)
# Superimpose density plots
densityplot(~ speed, data=verlander, groups=pitch_type, plot.points=FALSE)
# Verlander four seam fastball over time for different years
F4verl <- subset(verlander, pitch_type=="FF")
F4ver1$gameDay <- as.integer(formamt(F4verl$gamedate, format="%j"))
F4ver1$gameDay <- as.integer(format(F4verl$gamedate, format="%j"))
F4verl$gameDay <- as.integer(format(F4verl$gamedate, format="%j"))
dailyspeed <- aggregate(speed ~ gameDay + season, data=F4verl, fun=mean)
dailyspeed <- aggregate(speed ~ gameDay + season, data=F4verl, FUN=mean)
# scatter plot of speeds of fastball over time
xyplot(speed ~ gameDay | factor(season), data=dailyspeed,
xlab="Day of Year", ylab="Velocity")
# Calculate average speed of four-seam and changeup per
speedFC <- subset(verlander, pitch_type %in% c("FF", "CH"))
avgspeedFC <- aggregate(speed ~ pitch_type + season, data=speedFC, FUN=mean)
avgspeedFC
# Create dotplots of changeup and four seam speed
dotplot(factor(season) ~ speed, groups=pitch_type, data=avgspeedFC,
pch=c("C", "F"), cex=2)
# Check Verlander's four-seam speed as the game increases
avgSpeed = aggregate(speed ~ pitches + season, data=F4verl, FUN=mean)
xyplot(speed ~ pitches | factor(season), data=avgSpeed)
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, avgSpeedComb, length=0.1)
})
avgSpeedComb <- mean(F4verl$speed)
panel.xyplot(...)
# Check Verlander's four-seam speed as the game increases
avgSpeed = aggregate(speed ~ pitches + season, data=F4verl, FUN=mean)
xyplot(speed ~ pitches | factor(season), data=avgSpeed)
avgSpeedComb <- mean(F4verl$speed)
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, avgSpeedComb, length=0.1)
})
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, avgSpeedComb, length=0.3)
})
# Check Verlander's four-seam speed as the game increases
avgSpeed = aggregate(speed ~ pitches + season, data=F4verl, FUN=mean)
xyplot(speed ~ pitches | factor(season), data=avgSpeed)
avgSpeedComb <- mean(F4verl$speed)
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, avgSpeedComb, length=1)
})
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(100, 99.5, 0, avgSpeedComb, length=0.1)
})
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, 50, avgSpeedComb, length=0.1)
})
# add a panel funciton in order to add a label and text
xyplot(speed ~ pitches | factor(season), data=avgSpeed,
panel=function(...){
panel.xyplot(...)
panel.abline(v=100, lty='dotted')
panel.abline(h=avgSpeedComb)
panel.text(25, 100, "avg.speed")
panel.arrows(25, 99.5, 0, avgSpeedComb, length=0.1)
})
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=TRUE)
# Plot pitch locations for Verlander's second no hitter
NoHit <- subset(verlander, gamedata=="2011-05-07")
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=TRUE)
NoHit <- subset(verlander, gamedate=="2011-05-07")
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=TRUE)
# Create isometric scales because both are in feet
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=TRUE,
aspect="iso")
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=TRUE,
aspect="iso",
xlim=c(-2.2, 2.2),
ylim=c(0, 5),
xlab="Horizontal Location\n(ft. from middle of plate)",
ylab="Vertical Location\n(ft. from ground)")
# Create pitch names and key for a legend
pitchnames <- c("change-up", "curveball", "4S-fastball", "2S-fastball",
"slider")
mykey <- list(space="right",
border=TRUE,
cex.title=0.8,
title="pitch type",
text=pitchnames,
padding.text=4)
# Define limits of srike zone
topKzone <- 3.5
botKzone <- 1.6
inKzone <- -0.95
outKzone <- 0.95
# Plot with K zone and better legend
xyplot(pz ~ px | batter_hand, data=NoHit, groups=pitch_type, auto.key=mykey,
aspect="iso",
xlim=c(-2.2, 2.2),
ylim=c(0, 5),
xlab="Horizontal Location\n(ft. from middle of plate)",
ylab="Vertical Location\n(ft. from ground)",
panel=function(...){
panel.xyplot(...)
panel.rect(inKzone, botKzone, outKzone, topKzone, border="black",
lty=3)
})
rm(list=ls())
chapter_path = "C:/Users/conno/Documents/GitHub/Baseball/Analyzing Baseball Data With R/Book - First Edition/Chapter 6 - Advanced Graphics"
setwd(chapter_path)
load("balls_strikes_count.Rdata")
# The ggplot2 package
library(ggplot2)
# graphics in ggplot 2 are created by continually creating layers
# sample creates a random sample
sampleRows <- sample(1:nrow(cabrera), 20)
cabrera[sampleRows,]
p0 <- ggplot(data=cabrera, aes=(x=hitx, y=hity))
p0 <- ggplot(data=cabrera, aes=(x=hitx y=hity))
p0 <- ggplot(data=cabrera, aes=(x=hitx, y=hity))
p0 <- ggplot(data=cabrera, aes=(x=hitx))
# The ggplot2 package
library(ggplot2)
load.packages("ggplot2")
install.packages("ggplot2")
rm(list=ls())
chapter_path = "C:/Users/conno/Documents/GitHub/Baseball/Analyzing Baseball Data With R/Book - First Edition/Chapter 6 - Advanced Graphics"
setwd(chapter_path)
load("balls_strikes_count.Rdata")
# The ggplot2 package
library(ggplot2)
# graphics in ggplot 2 are created by continually creating layers
# sample creates a random sample
sampleRows <- sample(1:nrow(cabrera), 20)
cabrera[sampleRows,]
# Creating a spray chart for Miguel Cabrera
p0 <- ggplot(data=cabrera, aes=(x=hitx, y=hity))
p0 <- ggplot(data=cabrera, aes=(x=hitx))
p0 <- ggplot(data=cabrera, aes(x=hitx, y=hity))
p0
# We will plot a point on our object
p1 <- p0 + geom_point()
p1
# Group by whether the result was a hit, error, or out. coord_equla makes an
# equal scale
p0 = ggplot(data=cabrera, aes(x=hitx, y=hity))
p1 <- p0 + geom_point(aes(color=hit_outcome))
p2 <- p1 + coord_equal()
p2
# We can create multipanel by year through facet_wrap
p3 <- p2 + facet_wrap(~ season)
p3
# Define location of bases
bases <- data.frame(x=c(0, 90/sqrt(2), 0, 90/sqrt(2), 0),
y=c(0, 90/sqrt(2), 2*90/sqrt(2), 90/sqrt(2), 0))
# add base bath lines
p4 <- p3 + geom_path(aes(x=x, y=y), data=basese)
# add base bath lines
p4 <- p3 + geom_path(aes(x=x, y=y), data=bases)
p4
# Define location of bases
bases <- data.frame(x=c(0, 90/sqrt(2), 0, - 90/sqrt(2), 0),
y=c(0, 90/sqrt(2), 2*90/sqrt(2), 90/sqrt(2), 0))
# add base bath lines
p4 <- p3 + geom_path(aes(x=x, y=y), data=bases)
p4
# Add foul lines
p4 + geom_segment(x=0, xend=300, y=0, yend=300) +
geom_segment(x=, xend=-300, y=0, yend=300)
# Add foul lines
p4 + geom_segment(x=0, xend=300, y=0, yend=300) +
geom_segment(x=0, xend=-300, y=0, yend=300)
# Create Verlander Scatterplot with Smoothing Curve
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season) +
geom_line(stat="hline", yintercept="mean", lty=3) +
geom_point(aes(pitches, speed),
data=F4verl[sample(1:nrow(F4verl), 1000),]) +
geom_smooth(col="black") +
geom_vline(aes(xintercept=100), col="black", lty=2)
# Create Verlander Scatterplot with Smoothing Curve
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season) +
geom_hline(stat="hline", yintercept="mean", lty=3) +
geom_point(aes(pitches, speed),
data=F4verl[sample(1:nrow(F4verl), 1000),]) +
geom_smooth(col="black") +
geom_vline(aes(xintercept=100), col="black", lty=2)
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season) +
geom_hline(stat="hline", yintercept="mean", lty=3) +
geom_point(aes(pitches, speed),
data=F4verl[sample(1:nrow(F4verl), 1000),])
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season)
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season) +
geom_hline(stat="hline", yintercept="mean", lty=3)
F4verl <- subset(verlander, pitch_type=="FF")
ggplot(F4verl, aes(pitches, speed)) + facet_wrap(~ season) +
geom_line(stat="hline", yintercept="mean", lty=3)
